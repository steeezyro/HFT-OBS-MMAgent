name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release

jobs:
  cpp-build-test:
    name: C++ Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]
        compiler: [gcc-14, clang-17]
        include:
          - compiler: gcc-14
            cc: gcc-14
            cxx: g++-14
          - compiler: clang-17
            cc: clang-17
            cxx: clang++-17

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          libzmq3-dev \
          libssl-dev \
          ${{ matrix.compiler }}

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.26'

    - name: Configure CMake
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: |
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DBUILD_TESTING=ON \
          -GNinja

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest --output-on-failure --verbose

    - name: Run Benchmarks
      working-directory: ${{github.workspace}}/build
      run: |
        ./bench_orderbook
        echo "Benchmark completed"

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: matrix.compiler == 'gcc-14'
      with:
        name: benchmark-results-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          ${{github.workspace}}/build/*.json

  python-test:
    name: Python Test
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libzmq3-dev

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: python/.venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      working-directory: python
      run: poetry install --no-interaction --no-root

    - name: Install project
      working-directory: python
      run: poetry install --no-interaction

    - name: Run black
      working-directory: python
      run: poetry run black --check hft_rl/ tests/

    - name: Run ruff
      working-directory: python
      run: poetry run ruff check hft_rl/ tests/

    - name: Run tests with coverage
      working-directory: python
      run: |
        poetry run pytest tests/ \
          --cov=hft_rl \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: python/coverage.xml
        flags: python
        name: python-coverage

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-coverage-report
        path: python/htmlcov/

  integration-test:
    name: Integration Test
    runs-on: ubuntu-22.04
    needs: [cpp-build-test, python-test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          libzmq3-dev \
          libssl-dev \
          gcc-14 \
          g++-14

    - name: Build C++ components
      env:
        CC: gcc-14
        CXX: g++-14
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -GNinja
        cmake --build build -j

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install Python dependencies
      working-directory: python
      run: |
        poetry install --no-interaction

    - name: Run integration test
      timeout-minutes: 5
      run: |
        # Start ZMQ bridge in background
        ./build/zmq_bridge --live --endpoint tcp://*:5557 &
        ZMQ_PID=$!
        sleep 2

        # Run Python integration test
        cd python
        poetry run python -c "
        import time
        from hft_rl.env import HFTTradingEnv
        
        print('Testing environment integration...')
        env = HFTTradingEnv(zmq_endpoint='tcp://localhost:5557', max_steps=10)
        obs, info = env.reset()
        
        for i in range(5):
            action = env.action_space.sample()
            obs, reward, terminated, truncated, info = env.step(action)
            print(f'Step {i}: reward={reward:.3f}, inventory={info[\"inventory\"]}')
            
            if terminated or truncated:
                break
        
        env.close()
        print('Integration test completed successfully!')
        "

        # Clean up
        kill $ZMQ_PID || true

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-22.04
    needs: [cpp-build-test, python-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v3

    - name: Generate coverage badge
      run: |
        # This would integrate with shields.io or similar service
        echo "Coverage report generation would go here"

    - name: Update README badges
      run: |
        echo "Badge update would go here"

  performance-regression:
    name: Performance Regression Check
    runs-on: ubuntu-22.04
    needs: cpp-build-test
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download benchmark results
      uses: actions/download-artifact@v3
      with:
        name: benchmark-results-ubuntu-22.04-gcc-14

    - name: Check performance against targets
      run: |
        # Check if benchmark results meet targets
        echo "Performance target validation"
        
        # Check if P50 latency meets target
        if [ -f "add_orders_benchmark.json" ]; then
          P50=$(cat add_orders_benchmark.json | grep -o '"p50_latency_us": [0-9.]*' | cut -d':' -f2 | tr -d ' ')
          echo "Measured P50 latency: ${P50} μs (target: ≤10 μs)"
          
          if (( $(echo "$P50 > 10" | bc -l) )); then
            echo "⚠️ Performance target not met: P50 latency > 10 μs"
            echo "This indicates the hardware or implementation needs optimization"
          else
            echo "✅ Performance target achieved: P50 latency ≤ 10 μs"
          fi
        else
          echo "ℹ️ No benchmark data available - run benchmarks to get real metrics"
        fi

    - name: Post performance comment
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '⚠️ Performance regression detected in this PR. Please review the changes.'
          })

  security-scan:
    name: Security Scan
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: cpp, python

    - name: Build for CodeQL
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  docs-check:
    name: Documentation Check
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install docs dependencies
      run: |
        pip install mkdocs mkdocs-material

    - name: Check documentation builds
      run: |
        # This would build MkDocs documentation
        echo "Documentation build check"

    - name: Check for broken links
      run: |
        # Link checker would go here
        echo "Link check would go here"